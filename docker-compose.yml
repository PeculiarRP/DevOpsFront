services:
  backand:
    container_name: backend
    build: ./backend/
    command: python ./server_rule.py
    image: edenchik/devopslab:backand.1.0.0
    ports:
      - 8585:8585
    depends_on:
      - postgres
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      iot:
        aliases:
          - backand
  
  frontend:
    container_name: frontend
    build: ./frontend
    command: npm run dev
    image: edenchik/devopslab:frontend.1.0.0
    ports:
      - 5173:5173
    deploy:
      replicas: 1
      restart_policy:
        condition: unless-stopped
    networks:
      iot:
        aliases:
          - frontend

  sonarqube:
    image: sonarqube:9.9.2-community
    container_name: sonarqube
    depends_on:
      - postgres
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres_container:5432/postgres
      - SONAR_JDBC_USERNAME=postgres
      - SONAR_JDBC_PASSWORD=cadri
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    networks:
      iot:
          aliases:
            - sonarnet

  postgres:
    container_name: postgres_container
    image: postgres:17.4-alpine
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "cadri"
      PGDATA: ":./var/lib/postgresql/data/pgdata"
    volumes:
      - ../2. Init Database:/docker-entrypoint-initdb.d
      - .:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cadri"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      iot:
        aliases:
          - postgres

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:9.1
    environment:
      PGADMIN_DEFAULT_EMAIL: "ermo30@yandex.ru"
      PGADMIN_DEFAULT_PASSWORD: "cadri"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      iot:
        aliases:
          - postgres

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  pgadmin-data:

networks:
  iot:
    driver: bridge
